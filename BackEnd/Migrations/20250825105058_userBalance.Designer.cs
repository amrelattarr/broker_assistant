// <auto-generated />
using System;
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEnd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825105058_userBalance")]
    partial class userBalance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEnd.Models.Buy_Sell_Invest", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("buyPrice")
                        .HasColumnType("int");

                    b.Property<int>("changeAmount")
                        .HasColumnType("int");

                    b.Property<int>("sellPrice")
                        .HasColumnType("int");

                    b.HasKey("UserId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("BuySellInvests");
                });

            modelBuilder.Entity("BackEnd.Models.ChatBot", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MsgId"));

                    b.Property<string>("MsgText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MsgId");

                    b.ToTable("Chatbots");
                });

            modelBuilder.Entity("BackEnd.Models.Egx30", b =>
                {
                    b.Property<int>("EgxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EgxId"));

                    b.Property<DateTime>("BorsaDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IndexValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("EgxId");

                    b.ToTable("Egx30s");
                });

            modelBuilder.Entity("BackEnd.Models.Info", b =>
                {
                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MsgId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("StockId", "MsgId");

                    b.HasIndex("MsgId");

                    b.ToTable("Infos");
                });

            modelBuilder.Entity("BackEnd.Models.SendMessage", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MsgId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "MsgId");

                    b.HasIndex("MsgId");

                    b.ToTable("SendMessages");
                });

            modelBuilder.Entity("BackEnd.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EnglishName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEnd.Models.Buy_Sell_Invest", b =>
                {
                    b.HasOne("BackEnd.Models.Stock", "Stock")
                        .WithMany("BuySellInvests")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("BuySellInvests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.Info", b =>
                {
                    b.HasOne("BackEnd.Models.ChatBot", "Chatbot")
                        .WithMany("Infos")
                        .HasForeignKey("MsgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Stock", "Stock")
                        .WithMany("Infos")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatbot");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("BackEnd.Models.SendMessage", b =>
                {
                    b.HasOne("BackEnd.Models.ChatBot", "Chatbot")
                        .WithMany("SendMessages")
                        .HasForeignKey("MsgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("SendMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatbot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BackEnd.Models.ChatBot", b =>
                {
                    b.Navigation("Infos");

                    b.Navigation("SendMessages");
                });

            modelBuilder.Entity("BackEnd.Models.Stock", b =>
                {
                    b.Navigation("BuySellInvests");

                    b.Navigation("Infos");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Navigation("BuySellInvests");

                    b.Navigation("SendMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
